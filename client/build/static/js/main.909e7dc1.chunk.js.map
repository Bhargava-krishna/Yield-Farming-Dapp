{"version":3,"sources":["getWeb3.js","components/Pool.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Pool","props","onNewBlock","block","updatePrices","contract","methods","pendingReward","id","account","call","then","reward","setState","claim","Number","utils","fromWei","getLastPrice","price","getLastHappyPrice","rewardPrice","updatePoolBalance","getPoolBalance","balance","poolBalance","toFixed","updateUserBalance","getUserBalance","userBalance","onUnlock","unlockLoading","token","approve","_address","send","from","res","unlocked","status","onDeposit","balanceOf","depositShow","depositLoading","tokenBalance","onWithdraw","withdrawShow","withdrawLoading","onDepositClose","stake","toWei","state","deposit","onWithdrawClose","unstake","withdraw","onClaim","claimLoading","updateHappyBalance","yield","icon","this","pools","pool","eth","Contract","ERC20Contract","abi","symbol","toLowerCase","allowance","remaining","subscribe","err","Card","style","width","Body","Title","className","alt","src","Row","Col","Button","variant","onClick","disabled","Spinner","as","animation","size","Footer","Modal","show","centered","backdrop","Header","Form","Group","Control","type","value","onChange","e","target","Component","App","accounts","happyPrice","happyBalance","componentDidMount","getAccounts","net","getId","networkId","deployedNetwork","HappyChefContract","networks","address","instance","happy","HappyContract","on","location","reload","updateHappyPrice","populate","alert","error","getNbPools","nbPools","Array","length","_","i","setChildCallables","callables","childCallables","s","substring","Navbar","bg","Brand","height","Text","Collapse","ellipsis","Container","CardDeck","padding","map","key","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.909e7dc1.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport ERC20Contract from \"../contracts/ERC20.json\";\n\n\nclass Pool extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.id = this.props.id;\n        this.web3 = this.props.web3;\n        this.contract = this.props.contract;\n        this.account = this.props.account;\n        this.updateHappyBalance = this.props.updateHappyBalance;\n\n        this.state = {\n            yield: 0,\n            price: 0,\n            rewardPrice: 0,\n\n            claim: 0,\n            poolBalance: 0,\n            userBalance: 0,\n            unlocked: false,\n\n            token: null,\n            tokenBalance: 0,\n            icon: null,\n\n            deposit: 0,\n            depositShow: false,\n\n            withdraw: 0,\n            withdrawShow: false\n        };\n    }\n\n    \n    async componentDidMount() {\n        this.pool = await this.contract.methods.pools(this.id).call();\n        this.setState({ yield: this.pool.yield / 100 });\n        this.updatePrices();\n\n        // Get the pool token contract instance.\n        this.token = new this.web3.eth.Contract(ERC20Contract.abi, this.pool.token);\n        this.token.methods.symbol().call().then((token) => {\n            this.setState({ token: token, icon: 'images/' + token.toLowerCase() + '-coin.svg' });\n        });\n        this.token.methods.allowance(this.account, this.contract._address).call().then((remaining) => this.setState({ unlocked: Number(remaining) !== 0 }));\n\n        this.updatePoolBalance();\n        this.updateUserBalance();\n\n        this.web3.eth.subscribe('newBlockHeaders', (err, res) => {\n            if (!err) {\n                this.onNewBlock(res);\n            }\n        });\n    }\n\n\n    onNewBlock = async (block) => {\n        this.updatePrices();\n    }\n\n\n    updatePrices = () => {\n        this.contract.methods.pendingReward(this.id, this.account).call().then((reward) => {            \n            this.setState({ claim:  Number(this.web3.utils.fromWei(reward)) });\n        });\n        this.contract.methods.getLastPrice(this.id).call().then((price) => { \n            this.setState({ price: Number(this.web3.utils.fromWei(price)) }); \n        });\n        this.contract.methods.getLastHappyPrice().call().then((price) => { \n            this.setState({ rewardPrice: Number(this.web3.utils.fromWei(price)) }); \n        });\n    }\n\n\n    updatePoolBalance = () => {\n        this.contract.methods.getPoolBalance(this.id).call().then((balance) => {\n            this.setState({ poolBalance: Number(this.web3.utils.fromWei(balance)).toFixed(2) });\n        });\n    }\n\n\n    updateUserBalance = () => {\n        this.contract.methods.getUserBalance(this.id, this.account).call().then((balance) => {            \n            this.setState({ userBalance: Number(this.web3.utils.fromWei(balance)) });\n        });\n    }\n\n\n    onUnlock = async () => {\n        this.setState({ unlockLoading: true });        \n        this.token.methods.approve(this.contract._address, -1).send({ from: this.account }).then((res) => {\n            this.setState({ unlocked: res.status === true, unlockLoading: false });\n        });        \n    }\n\n\n    onDeposit = async () => {\n        const balance = await this.token.methods.balanceOf(this.account).call();\n        this.setState({ depositShow: true, depositLoading: true, tokenBalance: this.web3.utils.fromWei(balance) });\n    }\n\n\n    onWithdraw = async () => {\n        this.setState({ withdrawShow: true, withdrawLoading: true });\n    }\n\n\n    onDepositClose = async () => {\n        this.contract.methods.stake(this.id, this.web3.utils.toWei(this.state.deposit)).send({from: this.account}).then((res) => {\n            this.updateUserBalance();\n            this.updatePoolBalance();\n            this.setState({ depositLoading: false });\n        });\n        this.setState({ depositShow: false });\n    }\n\n\n    onWithdrawClose = async () => {\n        this.contract.methods.unstake(this.id, this.web3.utils.toWei(this.state.withdraw)).send({from: this.account}).then((res) => {\n            this.updateUserBalance();\n            this.setState({ withdrawLoading: false });\n        });\n        this.setState({ withdrawShow: false });\n    }\n\n\n    onClaim = async() => {\n        this.setState({ claimLoading: true });\n        this.contract.methods.unstake(this.id, 0).send({from: this.account}).then(() => {\n            this.updatePrices();\n            this.setState({ claimLoading: false });\n            this.updateHappyBalance();\n        });\n    }\n\n\n    render() {\n        return (\n        <>\n\n        <Card style={{ width: '18rem' }}>\n            <Card.Body>\n                <Card.Title>\n                    <img className=\"coin\" alt={ 'coin ' + this.state.id } src={ this.state.icon } />\n                    { this.state.token } staking\n                </Card.Title>\n                    <Row>\n                        <Col>\n                            APR:\n                        </Col>\n                        <Col className=\"right\">\n                            { this.state.yield } %\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            Earn:\n                        </Col>\n                        <Col className=\"right\">\n                            HAPPY\n                        </Col>\n                    </Row>\n                    <Row>\n                        <div className=\"title\">HAPPY earned</div>\n                    </Row>\n                    <Row>\n                        <Col>\n                            $ { (this.state.rewardPrice * this.state.claim).toFixed(6) }\n                        </Col>\n                        <Col className=\"right\">\n                            <Button variant=\"primary\" onClick={this.onClaim} disabled={ this.state.claim === 0 || this.state.claimLoading }>\n                                    { this.state.claimLoading && \n                                        <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                    }\n                                Claim\n                            </Button>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <div className=\"title\">{ this.state.token } stacked</div>\n                    </Row>\n                    <Row>\n                        <Col>\n                            { this.state.userBalance }\n                        </Col>\n                        <Col className=\"right\">\n                            { !this.state.unlocked &&\n                                <Button variant=\"primary\" onClick={this.onUnlock} disabled={this.state.unlockLoading || this.state.unlockLoading}>\n                                    { this.state.unlockLoading && \n                                        <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                    }\n                                    Unlock\n                                </Button>\n                            }\n                            { this.state.unlocked &&\n                                <>\n                                <Button variant=\"primary\" onClick={this.onDeposit} disabled={this.state.depositShow || this.state.depositLoading}>\n                                    { this.state.depositLoading && \n                                        <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                    }\n                                    +\n                                </Button>\n                                {' '}\n                                </>\n                            }\n                            { this.state.unlocked && this.state.userBalance !== '0' &&\n                                <Button variant=\"primary\" onClick={this.onWithdraw} disabled={this.state.withdrawShow || this.state.withdrawLoading}>\n                                    { this.state.withdrawLoading && \n                                        <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                    }\n                                    -\n                                </Button>\n                            }                            \n                        </Col>\n                    </Row>\n            </Card.Body>\n            <Card.Footer>\n                <Row>\n                    <Col>\n                        Total Pool Liquidity\n                    </Col>\n                    <Col className=\"right\">\n                        $ { (this.state.price * this.state.poolBalance).toFixed(2) }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        My staked value\n                    </Col>\n                    <Col className=\"right\">\n                        $ { (this.state.price * this.state.userBalance).toFixed(2) }\n                    </Col>\n                </Row>\n            </Card.Footer>\n        </Card>\n\n        <Modal show={this.state.depositShow} centered backdrop=\"static\" >\n            <Modal.Header>\n                <Modal.Title>{this.state.token} deposit</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        Your {this.state.token} balance: { this.state.tokenBalance } \n                        {/* <Button className=\"float-right\" variant=\"outline-secondary\" onClick={this.setState({ deposit: this.state.tokenBalance })} >Max</Button> */}\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Control type=\"text\" value={this.state.deposit} onChange={(e) => this.setState({deposit: e.target.value})}/>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={this.onDepositClose}>Deposit</Button>\n                <Button variant=\"secondary\" onClick={() => this.setState({ depositShow: false })}>Cancel</Button>\n            </Modal.Footer>\n        </Modal>\n\n        <Modal show={this.state.withdrawShow} centered backdrop=\"static\" >\n            <Modal.Header>\n                <Modal.Title>{this.state.token} withdraw</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        Your {this.state.token} balance: { this.state.userBalance } \n                        {/* <Button className=\"float-right\" variant=\"outline-secondary\" onClick={this.setState({ deposit: this.state.tokenBalance })} >Max</Button> */}\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Control type=\"text\" value={this.state.withdraw} onChange={(e) => this.setState({withdraw: e.target.value})}/>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={this.onWithdrawClose}>Withdraw</Button>\n                <Button variant=\"secondary\" onClick={() => this.setState({ withdrawShow: false })}>Cancel</Button>\n            </Modal.Footer>\n        </Modal>\n\n        </>\n        );\n    }\n\n}\n\n\nPool.propTypes = {\n    web3: PropTypes.object.isRequired,\n    contract: PropTypes.object.isRequired,\n    account: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    updateHappyBalance: PropTypes.func.isRequired,\n}\n\n\nexport default Pool;\n","import React, { Component } from \"react\";\nimport HappyChefContract from \"./contracts/HappyChef.json\";\nimport HappyContract from \"./contracts/Happy.json\";\nimport ERC20Contract from \"./contracts/ERC20.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport Button from 'react-bootstrap/Button';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\n\nimport Pool from './components/Pool';\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null, pools: [], happyPrice: 1, happyBalance: 0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = HappyChefContract.networks[networkId];\n      console.log('HappyChef address = ' + deployedNetwork.address);\n      const instance = new web3.eth.Contract(\n        HappyChefContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Get the happy token contract instance.\n      this.happy = new web3.eth.Contract(ERC20Contract.abi, HappyContract.networks[networkId].address);\n\n      // Callback when account is changed in Metamask\n      window.ethereum.on('accountsChanged', accounts => {\n          console.log(`Accounts updated: ${accounts}`);\n          window.location.reload();\n      });\n\n      window.ethereum.on('chainChanged', networkId => {\n          console.log(`Network updated: ${networkId}`);\n          window.location.reload();\n      });\n\n      web3.eth.subscribe('newBlockHeaders', (err, res) => {\n        if (!err) {\n          this.updateHappyPrice();\n        }\n      });\n\n      this.setState({ web3: web3, accounts: accounts, contract: instance }, this.populate);\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\n      console.error(error);\n    }\n  };\n\n\n  updateHappyPrice = () => {\n    this.state.contract.methods.getLastHappyPrice().call().then((res) => \n            this.setState({ happyPrice: this.state.web3.utils.fromWei(res, 'ether') }));\n  }\n\n\n  updateHappyBalance = () => {\n    this.happy.methods.balanceOf(this.state.accounts[0]).call().then((balance) => {\n      this.setState({ happyBalance: Number(this.state.web3.utils.fromWei(balance, 'ether')).toFixed(6) });\n    });\n  }\n\n\n  populate = async () => {\n    const { contract } = this.state;\n\n    this.updateHappyBalance();\n    this.updateHappyPrice();\n\n    const nbPools = await contract.methods.getNbPools().call();\n    var pools = Array.from({length: nbPools}, (_, i) => i)\n   \n    this.setState({ pools: pools });\n  };\n\n\n  setChildCallables = (callables) => {\n    this.childCallables = callables;\n  }\n\n\n  ellipsis(s) {\n    return s.substring(0, 6) + '...' + s.substring(s.length - 4, s.length);\n  }\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <>\n        <Navbar bg=\"light\">\n          <Navbar.Brand className=\"brand\">\n            <img src=\"images/happy.png\" alt=\"Happy\" height=\"30\" className=\"d-inline-block align-top\" />\n            { ' ' } Happy Staking\n          </Navbar.Brand>\n          <Navbar className=\"justify-content-between\">\n            <Navbar.Text>\n              HAPPY: $ { this.state.happyPrice }\n            </Navbar.Text>\n          </Navbar>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Button variant=\"outline-subtle\">{ this.state.happyBalance } HAPPY</Button>\n            <Button variant=\"outline-primary\">{ this.state.accounts ? this.ellipsis(this.state.accounts[0]) : 'Connect' }</Button>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <Container>\n            <CardDeck style={{ padding: '16px' }}>\n              { this.state.pools.map(pool => (\n                <Pool web3={this.state.web3} contract={this.state.contract} account={this.state.accounts[0]} \n                  updateHappyBalance={this.updateHappyBalance}\n                  id={pool} key={pool} />\n              ))}\n            </CardDeck>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}